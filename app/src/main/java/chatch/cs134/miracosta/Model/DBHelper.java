package chatch.cs134.miracosta.Model;

import android.app.ActivityManager;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class DBHelper extends SQLiteOpenHelper {

    public static final String TAG = DBHelper.class.getSimpleName();

    // Step 1) Define all database info in CONSTANTS
    public static final String DATABASE_NAME = "ToDo2Day";
    public static final String DATABASE_TABLE = "Tasks";
    public static final String FIELD_PRIMARY_KEY = "_id";
    public static final String FIELD_DESCRIPTION = "description";
    public static final String FIELD_IS_DONE = "is_done";

    public DBHelper(Context context){
        // factory is if it's based off another database
        super(context, DATABASE_NAME, null, 1);
    }

    // Constructor for DBHelper
    @Override
    public void onCreate(SQLiteDatabase db) {

        // Create all of database tables
        // 1) Determine whether to read or write the database (CREATE = write)
        // Opens a writable connection to the ToDo2Day database
        db = getWritableDatabase();

        // Execute the create table statement
        String sql = "CREATE TABLE IF NOT EXISTS " + DATABASE_TABLE + "("
                +FIELD_PRIMARY_KEY + " INTEGER PRIMARY KEY, "
                +FIELD_DESCRIPTION + " TEXT, "
                + FIELD_IS_DONE + " INTEGER" + ")";

        // Log the SQL String
        Log.i(TAG, sql);

        db.execSQL(sql);

        db.close();

    }

    // Method to add a task to the database
    // Corresponds to an insert operation
    public void addTask(Task task){

        // DO NOT grab id (-1), let database assign an id
        String description = task.getDescription();
        boolean isDone = task.isDone();

        // Get a reference to the database (readable or writable?)
        SQLiteDatabase db = getWritableDatabase();

        // ContentValues is key/value mapping
        ContentValues values = new ContentValues();
        values.put(FIELD_DESCRIPTION, description);
        values.put(FIELD_IS_DONE, isDone ? 1:0);

        // Adds a new record to the database
        long id = db.insert(DATABASE_TABLE, null, values);

        // After adding the new Task, set its id to the one generated by the database
        task.setID(id);

        // Close the database when done
        db.close();
    }

    // Method to get all the Task existing in the database
    public List<Task> getAllTasks(){

        // Construct an empty list
        List<Task> allTasks = new ArrayList<Task>();

        // Fill it from the database
        SQLiteDatabase db = getReadableDatabase();

        // Make a query to extract everything!
        // Query results in SQLite called Cursor objects
        Cursor cursor = db.query(DATABASE_TABLE, new String[]{FIELD_PRIMARY_KEY, FIELD_DESCRIPTION, FIELD_IS_DONE},
                null, null, null, null, null);

        // Loop through the cursor results, one at a time
        // Create Task objects and add them to the List
        // First determine if there are results
        if(cursor.moveToFirst()){   // Are you able to move to the first result?
                                    // If so, then you have at least 1 result (is like Iterator)
            do{
                Task task = new Task(cursor.getLong(0), cursor.getString(1),
                        cursor.getInt(2) == 1);
                allTasks.add(task);
            }while(cursor.moveToNext());    // Continue while there is a next value
        }

        // Remember to close the cursor
        cursor.close();
        db.close();

        // Return the filled list
        return allTasks;
    }

    public void clearAllTasks(){
        SQLiteDatabase db = getWritableDatabase();
        db.delete(DATABASE_TABLE, null, null);

        // Table is cleared
        db.close();
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }
}
